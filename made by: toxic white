import React, { useState } from 'react';
import { X, Home, ShoppingCart, Gift, ShoppingBag, Settings, Zap, Shield, Coffee, Check } from 'lucide-react';

export default function PlantsVsBrainrotUI() {
  const [activeTab, setActiveTab] = useState('main');
  const [isVisible, setIsVisible] = useState(true);
  const [position, setPosition] = useState({ x: 100, y: 100 });
  const [isDragging, setIsDragging] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });

  // Toggle states
  const [toggles, setToggles] = useState({
    autoFarm: false,
    autoTeleport: false,
    autoBuyAllSeed: false,
    autoBuyAllGear: false,
    autoPlantSecret: false,
    autoSell: false,
    autoGift: false,
    autoBuySeed: false,
    autoBuyGearStock: false,
    antiAFK: false,
    antiBan: false,
    antiKick: false
  });

  const [sellRarity, setSellRarity] = useState(['Rare']);
  const [sellType, setSellType] = useState('Brainrot');
  const [buyRarity, setBuyRarity] = useState(['Rare']);
  const [giftTarget, setGiftTarget] = useState('Player1');
  const [giftType, setGiftType] = useState('Brainrot');

  const handleToggle = (key) => {
    setToggles(prev => ({ ...prev, [key]: !prev[key] }));
  };

  const handleMouseDown = (e) => {
    if (e.target.closest('.drag-handle')) {
      setIsDragging(true);
      setDragStart({
        x: e.clientX - position.x,
        y: e.clientY - position.y
      });
    }
  };

  const handleMouseMove = (e) => {
    if (isDragging) {
      setPosition({
        x: e.clientX - dragStart.x,
        y: e.clientY - dragStart.y
      });
    }
  };

  const handleMouseUp = () => {
    setIsDragging(false);
  };

  React.useEffect(() => {
    if (isDragging) {
      window.addEventListener('mousemove', handleMouseMove);
      window.addEventListener('mouseup', handleMouseUp);
      return () => {
        window.removeEventListener('mousemove', handleMouseMove);
        window.removeEventListener('mouseup', handleMouseUp);
      };
    }
  }, [isDragging]);

  const tabs = [
    { id: 'main', name: 'Main', icon: Home },
    { id: 'sell', name: 'Auto Sell', icon: ShoppingCart },
    { id: 'gift', name: 'Auto Gift', icon: Gift },
    { id: 'shop', name: 'Shop', icon: ShoppingBag },
    { id: 'config', name: 'Config', icon: Settings }
  ];

  const ToggleSwitch = ({ label, checked, onChange, description }) => (
    <div className="flex items-center justify-between p-3 rounded-lg bg-gray-800/50 hover:bg-gray-800/70 transition-all">
      <div className="flex-1">
        <p className="text-sm font-medium text-white">{label}</p>
        {description && <p className="text-xs text-gray-400 mt-0.5">{description}</p>}
      </div>
      <button
        onClick={onChange}
        className={`relative w-12 h-6 rounded-full transition-all duration-300 ${
          checked ? 'bg-gradient-to-r from-green-400 to-emerald-500' : 'bg-gray-600'
        }`}
      >
        <div
          className={`absolute top-0.5 left-0.5 w-5 h-5 bg-white rounded-full shadow-lg transition-transform duration-300 ${
            checked ? 'translate-x-6' : 'translate-x-0'
          }`}
        />
      </button>
    </div>
  );

  const MultiSelect = ({ label, options, selected, onChange }) => (
    <div className="space-y-2">
      <p className="text-sm font-medium text-gray-300">{label}</p>
      <div className="flex flex-wrap gap-2">
        {options.map(opt => (
          <button
            key={opt}
            onClick={() => {
              if (selected.includes(opt)) {
                onChange(selected.filter(s => s !== opt));
              } else {
                onChange([...selected, opt]);
              }
            }}
            className={`px-3 py-1.5 rounded-lg text-xs font-medium transition-all ${
              selected.includes(opt)
                ? 'bg-gradient-to-r from-purple-500 to-pink-500 text-white'
                : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
            }`}
          >
            {opt}
            {selected.includes(opt) && <Check className="inline-block ml-1 w-3 h-3" />}
          </button>
        ))}
      </div>
    </div>
  );

  if (!isVisible) return null;

  return (
    <div
      style={{
        position: 'fixed',
        left: `${position.x}px`,
        top: `${position.y}px`,
        zIndex: 9999
      }}
      onMouseDown={handleMouseDown}
      className="select-none"
    >
      <div className="w-[600px] bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 rounded-2xl shadow-2xl border border-gray-700/50 overflow-hidden">
        {/* Header */}
        <div className="drag-handle cursor-move bg-gradient-to-r from-purple-600 via-pink-600 to-red-600 p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 rounded-lg bg-white/20 backdrop-blur-sm flex items-center justify-center">
                <Zap className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-white">Plants vs Brainrot</h1>
                <p className="text-xs text-white/80">Universal Script Hub</p>
              </div>
            </div>
            <button
              onClick={() => setIsVisible(false)}
              className="w-8 h-8 rounded-lg bg-white/20 hover:bg-white/30 flex items-center justify-center transition-all"
            >
              <X className="w-5 h-5 text-white" />
            </button>
          </div>
        </div>

        {/* Tabs */}
        <div className="flex gap-1 p-2 bg-gray-900/50">
          {tabs.map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex-1 flex items-center justify-center gap-2 py-2.5 rounded-lg font-medium text-sm transition-all ${
                activeTab === tab.id
                  ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg'
                  : 'bg-gray-800/50 text-gray-400 hover:bg-gray-800 hover:text-gray-300'
              }`}
            >
              <tab.icon className="w-4 h-4" />
              <span className="hidden sm:inline">{tab.name}</span>
            </button>
          ))}
        </div>

        {/* Content */}
        <div className="p-4 space-y-3 max-h-[400px] overflow-y-auto">
          {activeTab === 'main' && (
            <div className="space-y-3">
              <div className="p-3 rounded-lg bg-gradient-to-r from-blue-600/20 to-cyan-600/20 border border-blue-500/30">
                <p className="text-sm font-semibold text-blue-300">‚ö° Main Features</p>
                <p className="text-xs text-gray-400 mt-1">T·ª± ƒë·ªông farm v√† thu th·∫≠p t√†i nguy√™n</p>
              </div>
              <ToggleSwitch
                label="Auto Farm A-Z"
                checked={toggles.autoFarm}
                onChange={() => handleToggle('autoFarm')}
              />
              <ToggleSwitch
                label="Auto Teleport & Collect Money"
                checked={toggles.autoTeleport}
                onChange={() => handleToggle('autoTeleport')}
                description="T·ª± ƒë·ªông d·ªãch chuy·ªÉn v√† thu ti·ªÅn"
              />
              <ToggleSwitch
                label="Auto Buy All Seed Shop"
                checked={toggles.autoBuyAllSeed}
                onChange={() => handleToggle('autoBuyAllSeed')}
              />
              <ToggleSwitch
                label="Auto Buy All Gear Shop"
                checked={toggles.autoBuyAllGear}
                onChange={() => handleToggle('autoBuyAllGear')}
              />
              <ToggleSwitch
                label="Auto Plant Secret Seed"
                checked={toggles.autoPlantSecret}
                onChange={() => handleToggle('autoPlantSecret')}
              />
            </div>
          )}

          {activeTab === 'sell' && (
            <div className="space-y-3">
              <div className="p-3 rounded-lg bg-gradient-to-r from-orange-600/20 to-red-600/20 border border-orange-500/30">
                <p className="text-sm font-semibold text-orange-300">üõí Auto Sell System</p>
                <p className="text-xs text-gray-400 mt-1">T·ª± ƒë·ªông b√°n theo ƒë·ªô hi·∫øm</p>
              </div>
              <div className="space-y-2">
                <p className="text-sm font-medium text-gray-300">Ch·ªçn lo·∫°i</p>
                <div className="flex gap-2">
                  {['Brainrot', 'Plant'].map(type => (
                    <button
                      key={type}
                      onClick={() => setSellType(type)}
                      className={`flex-1 py-2 rounded-lg text-sm font-medium transition-all ${
                        sellType === type
                          ? 'bg-gradient-to-r from-orange-500 to-red-500 text-white'
                          : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                      }`}
                    >
                      {type}
                    </button>
                  ))}
                </div>
              </div>
              <MultiSelect
                label="Ch·ªçn ƒë·ªô hi·∫øm"
                options={['Rare', 'Epic', 'Legendary', 'Mythical']}
                selected={sellRarity}
                onChange={setSellRarity}
              />
              <ToggleSwitch
                label="B·∫≠t Auto Sell"
                checked={toggles.autoSell}
                onChange={() => handleToggle('autoSell')}
              />
            </div>
          )}

          {activeTab === 'gift' && (
            <div className="space-y-3">
              <div className="p-3 rounded-lg bg-gradient-to-r from-pink-600/20 to-purple-600/20 border border-pink-500/30">
                <p className="text-sm font-semibold text-pink-300">üéÅ Auto Gift System</p>
                <p className="text-xs text-gray-400 mt-1">T·ª± ƒë·ªông t·∫∑ng qu√† cho ng∆∞·ªùi ch∆°i</p>
              </div>
              <div className="space-y-2">
                <p className="text-sm font-medium text-gray-300">Ch·ªçn ng∆∞·ªùi ch∆°i</p>
                <select
                  value={giftTarget}
                  onChange={(e) => setGiftTarget(e.target.value)}
                  className="w-full bg-gray-700 text-white px-3 py-2 rounded-lg border border-gray-600 focus:border-purple-500 outline-none"
                >
                  <option>Player1</option>
                  <option>Player2</option>
                  <option>Player3</option>
                </select>
              </div>
              <div className="space-y-2">
                <p className="text-sm font-medium text-gray-300">Ch·ªçn lo·∫°i gift</p>
                <div className="flex gap-2">
                  {['Brainrot', 'Plant'].map(type => (
                    <button
                      key={type}
                      onClick={() => setGiftType(type)}
                      className={`flex-1 py-2 rounded-lg text-sm font-medium transition-all ${
                        giftType === type
                          ? 'bg-gradient-to-r from-pink-500 to-purple-500 text-white'
                          : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                      }`}
                    >
                      {type}
                    </button>
                  ))}
                </div>
              </div>
              <ToggleSwitch
                label="B·∫≠t Auto Gift"
                checked={toggles.autoGift}
                onChange={() => handleToggle('autoGift')}
              />
            </div>
          )}

          {activeTab === 'shop' && (
            <div className="space-y-3">
              <div className="p-3 rounded-lg bg-gradient-to-r from-green-600/20 to-emerald-600/20 border border-green-500/30">
                <p className="text-sm font-semibold text-green-300">üè™ Auto Buy Shop</p>
                <p className="text-xs text-gray-400 mt-1">T·ª± ƒë·ªông mua seed v√† gear</p>
              </div>
              <MultiSelect
                label="Ch·ªçn ƒë·ªô hi·∫øm seed"
                options={['Rare', 'Epic', 'Legendary', 'Mythical', 'Godly', 'Secret']}
                selected={buyRarity}
                onChange={setBuyRarity}
              />
              <ToggleSwitch
                label="Auto Buy Seed"
                checked={toggles.autoBuySeed}
                onChange={() => handleToggle('autoBuySeed')}
              />
              <ToggleSwitch
                label="Auto Buy All Gear Stock"
                checked={toggles.autoBuyGearStock}
                onChange={() => handleToggle('autoBuyGearStock')}
              />
            </div>
          )}

          {activeTab === 'config' && (
            <div className="space-y-3">
              <div className="p-3 rounded-lg bg-gradient-to-r from-blue-600/20 to-purple-600/20 border border-blue-500/30">
                <p className="text-sm font-semibold text-blue-300">üõ°Ô∏è Protection & Safety</p>
                <p className="text-xs text-gray-400 mt-1">B·∫£o v·ªá t√†i kho·∫£n v√† ch·ªëng ph√°t hi·ªán</p>
              </div>
              <ToggleSwitch
                label="Anti AFK"
                checked={toggles.antiAFK}
                onChange={() => handleToggle('antiAFK')}
                description="Ch·ªëng kick do AFK - AFK v√¥ h·∫°n"
              />
              <ToggleSwitch
                label="Anti Ban"
                checked={toggles.antiBan}
                onChange={() => handleToggle('antiBan')}
                description="L√†m m·ªù h√†nh ƒë·ªông script"
              />
              <ToggleSwitch
                label="Anti Kick"
                checked={toggles.antiKick}
                onChange={() => handleToggle('antiKick')}
                description="Ch·ªëng b·ªã kick kh·ªèi server"
              />
              <div className="p-3 rounded-lg bg-gray-800/50 space-y-1">
                <p className="text-xs font-semibold text-emerald-400">‚úÖ Universal Support</p>
                <p className="text-xs text-gray-400">PC: Synapse, Krnl, Fluxus, Script-Ware</p>
                <p className="text-xs text-gray-400">Mobile: Arceus X, Delta, Codex</p>
                <p className="text-xs text-gray-400">iOS: Delta, Esoteric, Nico's</p>
              </div>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="p-3 bg-gray-900/80 border-t border-gray-700/50 flex items-center justify-between">
          <div className="flex items-center gap-2">
            <div className="w-2 h-2 rounded-full bg-green-500 animate-pulse"></div>
            <span className="text-xs text-gray-400">Script Active</span>
          </div>
          <span className="text-xs text-gray-500">Made with ‚ù§Ô∏è</span>
        </div>
      </div>
    </div>
  );
}
